# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
# Configuration reference: https://circleci.com/docs/2.0/configuration-reference/
#
version: 2.1

executors:
  php-executor:
    docker:
      - image: vincentchalamon/php:7.2-dev
        environment:
          APP_ENV: test

  node-executor:
    docker:
      - image: vincentchalamon/node:11.2.0

  android-executor:
    docker:
      - image: vincentchalamon/node:android
    environment:
      JVM_OPTS: -Xmx3200m

jobs:
  # API
  init-api:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - vendor-{{ checksum "api/composer.lock" }}
            - vendor-
      - run:
          name: Install dependencies
          working_directory: api
          command: composer install --prefer-dist --no-progress --no-suggest --no-interaction
      - run:
          name: Build swagger documentation
          working_directory: api
          command: bin/console api:swagger:export > swagger.json
      - save_cache:
          paths:
            - api/vendor
          key: vendor-{{ checksum "api/composer.lock" }}
      - save_cache:
          paths:
            - ./api
          key: api-{{ .Environment.CIRCLE_SHA1 }}

  phpunit:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: PHPUnit
          working_directory: api
          command: bin/phpunit --log-junit coverage/junit.xml
      - store_test_results:
          path: api/coverage

  security_checker:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Security checker
          working_directory: api
          command: bin/security-checker security:check

  monitor_health:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Monitor health
          working_directory: api
          command: bin/console monitor:health

  doctrine_schema_validator:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Doctrine schema validator
          working_directory: api
          command: bin/console doctrine:schema:validate --skip-sync

  php_cs_fixer:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: PHP CS fixer
          working_directory: api
          command: bin/php-cs-fixer fix --dry-run --ansi --verbose

  phpstan:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: PHPStan
          working_directory: api
          command: bin/phpstan analyse -l 0 src

  behat:
    docker:
      - image: vincentchalamon/php:7.2-dev
        environment:
          APP_ENV: test
          DATABASE_URL: pgsql://root@localhost/zero-dechet
          MAILER_URL: smtp://localhost:25
          REDIS_HOST: localhost
      - image: mdillon/postgis:11-alpine
        environment:
          POSTGRES_DB: zero-dechet
          POSTGRES_USER: root
      - image: redis:4-alpine
      - image: tophfr/mailcatcher:0.6.5
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Update schema
          working_directory: api
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/v0.3.0/dockerize-linux-amd64-v0.3.0.tar.gz
            tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.3.0.tar.gz
            rm dockerize-linux-amd64-v0.3.0.tar.gz
            echo "Waiting for PostgreSQL to be ready..."
            dockerize -wait tcp://localhost:5432 -timeout 1m
            bin/console doctrine:migrations:migrate --no-interaction
            bin/console doctrine:schema:update --force --no-interaction
      - run:
          name: Behat
          working_directory: api
          command: bin/behat -p ci
      - store_artifacts:
          path: api/var/log

  swagger_validator:
    executor: node-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Swagger validator
          working_directory: api
          command: swagger-cli validate swagger.json
      - store_artifacts:
          path: api/swagger.json
          destination: swagger.json

  deploy-api:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Deploy API
          command: git subtree push --prefix api https://heroku:$HEROKU_API_KEY@git.heroku.com/zero-dechet-api.git master

  # Admin
  deploy-admin:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - node_modules-{{ checksum "admin/yarn.lock" }}
            - node_modules-
      - run:
          name: Install dependencies
          working_directory: admin
          command: yarn install --pure-lockfile
      - run:
          name: Deploy admin
          command: git subtree push --prefix api https://heroku:$HEROKU_API_KEY@git.heroku.com/zero-dechet-admin.git master

  # App
  init-app:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - node_modules-{{ checksum "app/yarn.lock" }}
            - node_modules-
      - run:
          name: Install dependencies
          working_directory: app
          command: yarn install --pure-lockfile
      - save_cache:
          paths:
            - app/node_modules
          key: node_modules-{{ checksum "app/yarn.lock" }}
      - save_cache:
          paths:
            - ./app
          key: app-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          working_directory: app
          command: ls -als

  eslint:
    executor: node-executor
    steps:
      - restore_cache:
          keys: 
            - app-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: ESLint
          working_directory: app
          command: yarn eslint src

  detox:
    executor: android-executor
    steps:
      - restore_cache:
          keys: 
            - app-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Build app
          working_directory: app
          command: detox build --configuration android.emu.release
          environment:
            REACT_APP_API_ENTRYPOINT: https://api.zero-dechet.app
      - run:
          name: Run Detox
          working_directory: app
          command: detox test --configuration android.emu.release --cleanup
      - save_cache:
          paths:
            - ./app/build
          key: app-build-{{ .Environment.CIRCLE_SHA1 }}

  deploy-app:
    executor: android-executor
    steps:
      - restore_cache:
          keys:
            - app-build-{{ .Environment.CIRCLE_SHA1 }}
      - store_artifacts:
          path: app/build
#      - run: |
#            todo Deploy to stores

workflows:
  version: 2
  test-and-deploy:
    jobs:
      # API
      - init-api
      - phpunit:
          requires:
            - init-api
      - security_checker:
          requires:
            - init-api
      - monitor_health:
          requires:
            - init-api
      - doctrine_schema_validator:
          requires:
            - init-api
      - php_cs_fixer:
          requires:
            - init-api
      - phpstan:
          requires:
            - init-api
      - swagger_validator:
          requires:
            - init-api
      - behat:
          requires:
            - init-api
      - deploy-api:
          requires:
            - phpunit
            - security_checker
            - monitor_health
            - doctrine_schema_validator
            - php_cs_fixer
            - phpstan
            - behat
            - swagger_validator
          filters:
            tags:
              only: /.*/
      # Admin
      - deploy-admin:
          requires:
            - deploy-api
          filters:
            tags:
              only: /.*/
      # App
      - init-app
      - eslint:
          requires:
            - init-app
      - detox:
          requires:
            - init-app
      - deploy-app:
          requires:
            - eslint
            - detox
            - deploy-api
          filters:
            tags:
              only: /.*/
